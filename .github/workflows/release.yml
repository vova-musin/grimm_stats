name: Release GrimmStats

on:
  push:
    tags:
      - 'v1.2.2'
      - 'v*.*.*-*'   # поддержка предрелизных тегов (v1.2.3-rc.1)

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller pillow

      - name: Get version/prerelease from tag
        id: get_version
        shell: pwsh
        run: |
          $tag = "${{ github.ref_name }}"
          $semver = $tag.TrimStart('v')
          if ($semver -match '^(\d+\.\d+\.\d+)') { $semver = $Matches[1] }
          $isPre = if ($tag -like '*-*') { 'true' } else { 'false' }
          echo "TAG=$tag"       >> $env:GITHUB_OUTPUT
          echo "SEMVER=$semver" >> $env:GITHUB_OUTPUT
          echo "PRERELEASE=$isPre" >> $env:GITHUB_OUTPUT

      - name: Build via build.ps1 (bundles updater, optional signing)
        shell: pwsh
        env:
          SIGN_PFX_PATH: ${{ secrets.SIGN_PFX_PATH }}
          SIGN_PFX_PASSWORD: ${{ secrets.SIGN_PFX_PASSWORD }}
          SIGN_CERT_THUMBPRINT: ${{ secrets.SIGN_CERT_THUMBPRINT }}
          SIGN_TOOL: ${{ secrets.SIGN_TOOL }}
          SIGN_TIMESTAMP_URL: ${{ secrets.SIGN_TIMESTAMP_URL }}
        run: |
          pwsh -NoProfile -ExecutionPolicy Bypass -File .\build.ps1 -Version "${{ steps.get_version.outputs.SEMVER }}"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_version.outputs.TAG }}
          name: ${{ steps.get_version.outputs.TAG }}
          body: "Auto build ${{ steps.get_version.outputs.TAG }}"
          prerelease: ${{ steps.get_version.outputs.PRERELEASE }}
          files: dist/GrimmStats.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update version.json in main branch
        shell: pwsh
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git fetch origin main
          git checkout main
          git pull origin main
          
          # Обновляем exe_url в version.json
          $versionFile = "version.json"
          if (Test-Path $versionFile) {
              $obj = Get-Content $versionFile | ConvertFrom-Json
              $obj.exe_url = "https://github.com/${{ github.repository }}/releases/download/${{ steps.get_version.outputs.TAG }}/GrimmStats.exe"
              $obj | ConvertTo-Json -Depth 3 | Set-Content $versionFile -Encoding UTF8
              
              git add $versionFile
              git diff-index --quiet HEAD || git commit -m "Update manifest for ${{ steps.get_version.outputs.TAG }} [skip ci]"
              git push origin main
          }
